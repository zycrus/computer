// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=address[6], out=notsel0);
    Not(in=address[7], out=notsel1);
    Not(in=address[8], out=notsel2);
    // RAM 000
    And(a=notsel0, b=notsel1, out=and0);
    And(a=and0, b=notsel2, out=sel0);
    And(a=sel0, b=load, out=add0);
    RAM64 (in=in, load=add0, address=address[0..5], out=ram0);
    // RAM 001
    And(a=address[6], b=notsel1, out=and1);
    And(a=and1, b=notsel2, out=sel1);
    And(a=sel1, b=load, out=add1);
    RAM64 (in=in, load=add1, address=address[0..5], out=ram1);
    // RAM 010
    And(a=notsel0, b=address[7], out=and2);
    And(a=and2, b=notsel2, out=sel2);
    And(a=sel2, b=load, out=add2);
    RAM64 (in=in, load=add2, address=address[0..5], out=ram2);
    // RAM 011
    And(a=address[6], b=address[7], out=and3);
    And(a=and3, b=notsel2, out=sel3);
    And(a=sel3, b=load, out=add3);
    RAM64 (in=in, load=add3, address=address[0..5], out=ram3);
    // RAM 100
    And(a=notsel0, b=notsel1, out=and4);
    And(a=and4, b=address[8], out=sel4);
    And(a=sel4, b=load, out=add4);
    RAM64 (in=in, load=add4, address=address[0..5], out=ram4);
    // RAM 101
    And(a=address[6], b=notsel1, out=and5);
    And(a=and5, b=address[8], out=sel5);
    And(a=sel5, b=load, out=add5);
    RAM64 (in=in, load=add5, address=address[0..5], out=ram5);
    // RAM 110
    And(a=notsel0, b=address[7], out=and6);
    And(a=and6, b=address[8], out=sel6);
    And(a=sel6, b=load, out=add6);
    RAM64 (in=in, load=add6, address=address[0..5], out=ram6);
    // RAM 111
    And(a=address[6], b=address[7], out=and7);
    And(a=and7, b=address[8], out=sel7);
    And(a=sel7, b=load, out=add7);
    RAM64 (in=in, load=add7, address=address[0..5], out=ram7);

    Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[6..8], out=out);
}